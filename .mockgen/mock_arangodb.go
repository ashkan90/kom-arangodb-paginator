// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/arangodb/go-driver (interfaces: Client,Connection,ClientDatabases,ClientCluster,QueryExtra,QueryStatistics,Cursor,Database)

// Package mock_go_driver is a generated GoMock package.
package mock_go_driver

import (
	context "context"
	reflect "reflect"
	time "time"

	driver "github.com/arangodb/go-driver"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AccessibleDatabases mocks base method.
func (m *MockClient) AccessibleDatabases(arg0 context.Context) ([]driver.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessibleDatabases", arg0)
	ret0, _ := ret[0].([]driver.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessibleDatabases indicates an expected call of AccessibleDatabases.
func (mr *MockClientMockRecorder) AccessibleDatabases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessibleDatabases", reflect.TypeOf((*MockClient)(nil).AccessibleDatabases), arg0)
}

// Backup mocks base method.
func (m *MockClient) Backup() driver.ClientBackup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup")
	ret0, _ := ret[0].(driver.ClientBackup)
	return ret0
}

// Backup indicates an expected call of Backup.
func (mr *MockClientMockRecorder) Backup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockClient)(nil).Backup))
}

// Cluster mocks base method.
func (m *MockClient) Cluster(arg0 context.Context) (driver.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", arg0)
	ret0, _ := ret[0].(driver.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockClientMockRecorder) Cluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockClient)(nil).Cluster), arg0)
}

// Connection mocks base method.
func (m *MockClient) Connection() driver.Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection")
	ret0, _ := ret[0].(driver.Connection)
	return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockClientMockRecorder) Connection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockClient)(nil).Connection))
}

// CreateDatabase mocks base method.
func (m *MockClient) CreateDatabase(arg0 context.Context, arg1 string, arg2 *driver.CreateDatabaseOptions) (driver.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", arg0, arg1, arg2)
	ret0, _ := ret[0].(driver.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockClientMockRecorder) CreateDatabase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockClient)(nil).CreateDatabase), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockClient) CreateUser(arg0 context.Context, arg1 string, arg2 *driver.UserOptions) (driver.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(driver.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), arg0, arg1, arg2)
}

// Database mocks base method.
func (m *MockClient) Database(arg0 context.Context, arg1 string) (driver.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database", arg0, arg1)
	ret0, _ := ret[0].(driver.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Database indicates an expected call of Database.
func (mr *MockClientMockRecorder) Database(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockClient)(nil).Database), arg0, arg1)
}

// DatabaseExists mocks base method.
func (m *MockClient) DatabaseExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseExists indicates an expected call of DatabaseExists.
func (mr *MockClientMockRecorder) DatabaseExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseExists", reflect.TypeOf((*MockClient)(nil).DatabaseExists), arg0, arg1)
}

// Databases mocks base method.
func (m *MockClient) Databases(arg0 context.Context) ([]driver.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Databases", arg0)
	ret0, _ := ret[0].([]driver.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Databases indicates an expected call of Databases.
func (mr *MockClientMockRecorder) Databases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Databases", reflect.TypeOf((*MockClient)(nil).Databases), arg0)
}

// Foxx mocks base method.
func (m *MockClient) Foxx() driver.FoxxService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Foxx")
	ret0, _ := ret[0].(driver.FoxxService)
	return ret0
}

// Foxx indicates an expected call of Foxx.
func (mr *MockClientMockRecorder) Foxx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foxx", reflect.TypeOf((*MockClient)(nil).Foxx))
}

// Logs mocks base method.
func (m *MockClient) Logs(arg0 context.Context) (driver.ServerLogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", arg0)
	ret0, _ := ret[0].(driver.ServerLogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs.
func (mr *MockClientMockRecorder) Logs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockClient)(nil).Logs), arg0)
}

// Replication mocks base method.
func (m *MockClient) Replication() driver.Replication {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replication")
	ret0, _ := ret[0].(driver.Replication)
	return ret0
}

// Replication indicates an expected call of Replication.
func (mr *MockClientMockRecorder) Replication() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replication", reflect.TypeOf((*MockClient)(nil).Replication))
}

// ServerID mocks base method.
func (m *MockClient) ServerID(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerID indicates an expected call of ServerID.
func (mr *MockClientMockRecorder) ServerID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerID", reflect.TypeOf((*MockClient)(nil).ServerID), arg0)
}

// ServerMode mocks base method.
func (m *MockClient) ServerMode(arg0 context.Context) (driver.ServerMode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerMode", arg0)
	ret0, _ := ret[0].(driver.ServerMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerMode indicates an expected call of ServerMode.
func (mr *MockClientMockRecorder) ServerMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerMode", reflect.TypeOf((*MockClient)(nil).ServerMode), arg0)
}

// ServerRole mocks base method.
func (m *MockClient) ServerRole(arg0 context.Context) (driver.ServerRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerRole", arg0)
	ret0, _ := ret[0].(driver.ServerRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerRole indicates an expected call of ServerRole.
func (mr *MockClientMockRecorder) ServerRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerRole", reflect.TypeOf((*MockClient)(nil).ServerRole), arg0)
}

// SetServerMode mocks base method.
func (m *MockClient) SetServerMode(arg0 context.Context, arg1 driver.ServerMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServerMode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServerMode indicates an expected call of SetServerMode.
func (mr *MockClientMockRecorder) SetServerMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServerMode", reflect.TypeOf((*MockClient)(nil).SetServerMode), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockClient) Shutdown(arg0 context.Context, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockClientMockRecorder) Shutdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockClient)(nil).Shutdown), arg0, arg1)
}

// ShutdownInfoV2 mocks base method.
func (m *MockClient) ShutdownInfoV2(arg0 context.Context) (driver.ShutdownInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownInfoV2", arg0)
	ret0, _ := ret[0].(driver.ShutdownInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShutdownInfoV2 indicates an expected call of ShutdownInfoV2.
func (mr *MockClientMockRecorder) ShutdownInfoV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownInfoV2", reflect.TypeOf((*MockClient)(nil).ShutdownInfoV2), arg0)
}

// ShutdownV2 mocks base method.
func (m *MockClient) ShutdownV2(arg0 context.Context, arg1, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownV2", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownV2 indicates an expected call of ShutdownV2.
func (mr *MockClientMockRecorder) ShutdownV2(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownV2", reflect.TypeOf((*MockClient)(nil).ShutdownV2), arg0, arg1, arg2)
}

// Statistics mocks base method.
func (m *MockClient) Statistics(arg0 context.Context) (driver.ServerStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", arg0)
	ret0, _ := ret[0].(driver.ServerStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockClientMockRecorder) Statistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockClient)(nil).Statistics), arg0)
}

// SynchronizeEndpoints mocks base method.
func (m *MockClient) SynchronizeEndpoints(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronizeEndpoints", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SynchronizeEndpoints indicates an expected call of SynchronizeEndpoints.
func (mr *MockClientMockRecorder) SynchronizeEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeEndpoints", reflect.TypeOf((*MockClient)(nil).SynchronizeEndpoints), arg0)
}

// SynchronizeEndpoints2 mocks base method.
func (m *MockClient) SynchronizeEndpoints2(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronizeEndpoints2", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SynchronizeEndpoints2 indicates an expected call of SynchronizeEndpoints2.
func (mr *MockClientMockRecorder) SynchronizeEndpoints2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeEndpoints2", reflect.TypeOf((*MockClient)(nil).SynchronizeEndpoints2), arg0, arg1)
}

// User mocks base method.
func (m *MockClient) User(arg0 context.Context, arg1 string) (driver.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0, arg1)
	ret0, _ := ret[0].(driver.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockClientMockRecorder) User(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockClient)(nil).User), arg0, arg1)
}

// UserExists mocks base method.
func (m *MockClient) UserExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockClientMockRecorder) UserExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockClient)(nil).UserExists), arg0, arg1)
}

// Users mocks base method.
func (m *MockClient) Users(arg0 context.Context) ([]driver.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users", arg0)
	ret0, _ := ret[0].([]driver.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users.
func (mr *MockClientMockRecorder) Users(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockClient)(nil).Users), arg0)
}

// Version mocks base method.
func (m *MockClient) Version(arg0 context.Context) (driver.VersionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0)
	ret0, _ := ret[0].(driver.VersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockClientMockRecorder) Version(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockClient)(nil).Version), arg0)
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockConnection) Do(arg0 context.Context, arg1 driver.Request) (driver.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(driver.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockConnectionMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockConnection)(nil).Do), arg0, arg1)
}

// Endpoints mocks base method.
func (m *MockConnection) Endpoints() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoints")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Endpoints indicates an expected call of Endpoints.
func (mr *MockConnectionMockRecorder) Endpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockConnection)(nil).Endpoints))
}

// NewRequest mocks base method.
func (m *MockConnection) NewRequest(arg0, arg1 string) (driver.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", arg0, arg1)
	ret0, _ := ret[0].(driver.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockConnectionMockRecorder) NewRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockConnection)(nil).NewRequest), arg0, arg1)
}

// Protocols mocks base method.
func (m *MockConnection) Protocols() driver.ProtocolSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Protocols")
	ret0, _ := ret[0].(driver.ProtocolSet)
	return ret0
}

// Protocols indicates an expected call of Protocols.
func (mr *MockConnectionMockRecorder) Protocols() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocols", reflect.TypeOf((*MockConnection)(nil).Protocols))
}

// SetAuthentication mocks base method.
func (m *MockConnection) SetAuthentication(arg0 driver.Authentication) (driver.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAuthentication", arg0)
	ret0, _ := ret[0].(driver.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAuthentication indicates an expected call of SetAuthentication.
func (mr *MockConnectionMockRecorder) SetAuthentication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthentication", reflect.TypeOf((*MockConnection)(nil).SetAuthentication), arg0)
}

// Unmarshal mocks base method.
func (m *MockConnection) Unmarshal(arg0 driver.RawObject, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockConnectionMockRecorder) Unmarshal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockConnection)(nil).Unmarshal), arg0, arg1)
}

// UpdateEndpoints mocks base method.
func (m *MockConnection) UpdateEndpoints(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpoints", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEndpoints indicates an expected call of UpdateEndpoints.
func (mr *MockConnectionMockRecorder) UpdateEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpoints", reflect.TypeOf((*MockConnection)(nil).UpdateEndpoints), arg0)
}

// MockClientDatabases is a mock of ClientDatabases interface.
type MockClientDatabases struct {
	ctrl     *gomock.Controller
	recorder *MockClientDatabasesMockRecorder
}

// MockClientDatabasesMockRecorder is the mock recorder for MockClientDatabases.
type MockClientDatabasesMockRecorder struct {
	mock *MockClientDatabases
}

// NewMockClientDatabases creates a new mock instance.
func NewMockClientDatabases(ctrl *gomock.Controller) *MockClientDatabases {
	mock := &MockClientDatabases{ctrl: ctrl}
	mock.recorder = &MockClientDatabasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientDatabases) EXPECT() *MockClientDatabasesMockRecorder {
	return m.recorder
}

// AccessibleDatabases mocks base method.
func (m *MockClientDatabases) AccessibleDatabases(arg0 context.Context) ([]driver.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessibleDatabases", arg0)
	ret0, _ := ret[0].([]driver.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessibleDatabases indicates an expected call of AccessibleDatabases.
func (mr *MockClientDatabasesMockRecorder) AccessibleDatabases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessibleDatabases", reflect.TypeOf((*MockClientDatabases)(nil).AccessibleDatabases), arg0)
}

// CreateDatabase mocks base method.
func (m *MockClientDatabases) CreateDatabase(arg0 context.Context, arg1 string, arg2 *driver.CreateDatabaseOptions) (driver.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", arg0, arg1, arg2)
	ret0, _ := ret[0].(driver.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockClientDatabasesMockRecorder) CreateDatabase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockClientDatabases)(nil).CreateDatabase), arg0, arg1, arg2)
}

// Database mocks base method.
func (m *MockClientDatabases) Database(arg0 context.Context, arg1 string) (driver.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database", arg0, arg1)
	ret0, _ := ret[0].(driver.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Database indicates an expected call of Database.
func (mr *MockClientDatabasesMockRecorder) Database(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockClientDatabases)(nil).Database), arg0, arg1)
}

// DatabaseExists mocks base method.
func (m *MockClientDatabases) DatabaseExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseExists indicates an expected call of DatabaseExists.
func (mr *MockClientDatabasesMockRecorder) DatabaseExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseExists", reflect.TypeOf((*MockClientDatabases)(nil).DatabaseExists), arg0, arg1)
}

// Databases mocks base method.
func (m *MockClientDatabases) Databases(arg0 context.Context) ([]driver.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Databases", arg0)
	ret0, _ := ret[0].([]driver.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Databases indicates an expected call of Databases.
func (mr *MockClientDatabasesMockRecorder) Databases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Databases", reflect.TypeOf((*MockClientDatabases)(nil).Databases), arg0)
}

// MockClientCluster is a mock of ClientCluster interface.
type MockClientCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClientClusterMockRecorder
}

// MockClientClusterMockRecorder is the mock recorder for MockClientCluster.
type MockClientClusterMockRecorder struct {
	mock *MockClientCluster
}

// NewMockClientCluster creates a new mock instance.
func NewMockClientCluster(ctrl *gomock.Controller) *MockClientCluster {
	mock := &MockClientCluster{ctrl: ctrl}
	mock.recorder = &MockClientClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientCluster) EXPECT() *MockClientClusterMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockClientCluster) Cluster(arg0 context.Context) (driver.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", arg0)
	ret0, _ := ret[0].(driver.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockClientClusterMockRecorder) Cluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockClientCluster)(nil).Cluster), arg0)
}

// MockQueryExtra is a mock of QueryExtra interface.
type MockQueryExtra struct {
	ctrl     *gomock.Controller
	recorder *MockQueryExtraMockRecorder
}

// MockQueryExtraMockRecorder is the mock recorder for MockQueryExtra.
type MockQueryExtraMockRecorder struct {
	mock *MockQueryExtra
}

// NewMockQueryExtra creates a new mock instance.
func NewMockQueryExtra(ctrl *gomock.Controller) *MockQueryExtra {
	mock := &MockQueryExtra{ctrl: ctrl}
	mock.recorder = &MockQueryExtraMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryExtra) EXPECT() *MockQueryExtraMockRecorder {
	return m.recorder
}

// GetPlanRaw mocks base method.
func (m *MockQueryExtra) GetPlanRaw() ([]byte, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanRaw")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPlanRaw indicates an expected call of GetPlanRaw.
func (mr *MockQueryExtraMockRecorder) GetPlanRaw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanRaw", reflect.TypeOf((*MockQueryExtra)(nil).GetPlanRaw))
}

// GetProfileRaw mocks base method.
func (m *MockQueryExtra) GetProfileRaw() ([]byte, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileRaw")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProfileRaw indicates an expected call of GetProfileRaw.
func (mr *MockQueryExtraMockRecorder) GetProfileRaw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileRaw", reflect.TypeOf((*MockQueryExtra)(nil).GetProfileRaw))
}

// GetStatistics mocks base method.
func (m *MockQueryExtra) GetStatistics() driver.QueryStatistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics")
	ret0, _ := ret[0].(driver.QueryStatistics)
	return ret0
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockQueryExtraMockRecorder) GetStatistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockQueryExtra)(nil).GetStatistics))
}

// MockQueryStatistics is a mock of QueryStatistics interface.
type MockQueryStatistics struct {
	ctrl     *gomock.Controller
	recorder *MockQueryStatisticsMockRecorder
}

// MockQueryStatisticsMockRecorder is the mock recorder for MockQueryStatistics.
type MockQueryStatisticsMockRecorder struct {
	mock *MockQueryStatistics
}

// NewMockQueryStatistics creates a new mock instance.
func NewMockQueryStatistics(ctrl *gomock.Controller) *MockQueryStatistics {
	mock := &MockQueryStatistics{ctrl: ctrl}
	mock.recorder = &MockQueryStatisticsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryStatistics) EXPECT() *MockQueryStatisticsMockRecorder {
	return m.recorder
}

// ExecutionTime mocks base method.
func (m *MockQueryStatistics) ExecutionTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ExecutionTime indicates an expected call of ExecutionTime.
func (mr *MockQueryStatisticsMockRecorder) ExecutionTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionTime", reflect.TypeOf((*MockQueryStatistics)(nil).ExecutionTime))
}

// Filtered mocks base method.
func (m *MockQueryStatistics) Filtered() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filtered")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Filtered indicates an expected call of Filtered.
func (mr *MockQueryStatisticsMockRecorder) Filtered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filtered", reflect.TypeOf((*MockQueryStatistics)(nil).Filtered))
}

// FullCount mocks base method.
func (m *MockQueryStatistics) FullCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// FullCount indicates an expected call of FullCount.
func (mr *MockQueryStatisticsMockRecorder) FullCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullCount", reflect.TypeOf((*MockQueryStatistics)(nil).FullCount))
}

// ScannedFull mocks base method.
func (m *MockQueryStatistics) ScannedFull() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScannedFull")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ScannedFull indicates an expected call of ScannedFull.
func (mr *MockQueryStatisticsMockRecorder) ScannedFull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScannedFull", reflect.TypeOf((*MockQueryStatistics)(nil).ScannedFull))
}

// ScannedIndex mocks base method.
func (m *MockQueryStatistics) ScannedIndex() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScannedIndex")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ScannedIndex indicates an expected call of ScannedIndex.
func (mr *MockQueryStatisticsMockRecorder) ScannedIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScannedIndex", reflect.TypeOf((*MockQueryStatistics)(nil).ScannedIndex))
}

// WritesExecuted mocks base method.
func (m *MockQueryStatistics) WritesExecuted() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritesExecuted")
	ret0, _ := ret[0].(int64)
	return ret0
}

// WritesExecuted indicates an expected call of WritesExecuted.
func (mr *MockQueryStatisticsMockRecorder) WritesExecuted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritesExecuted", reflect.TypeOf((*MockQueryStatistics)(nil).WritesExecuted))
}

// WritesIgnored mocks base method.
func (m *MockQueryStatistics) WritesIgnored() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritesIgnored")
	ret0, _ := ret[0].(int64)
	return ret0
}

// WritesIgnored indicates an expected call of WritesIgnored.
func (mr *MockQueryStatisticsMockRecorder) WritesIgnored() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritesIgnored", reflect.TypeOf((*MockQueryStatistics)(nil).WritesIgnored))
}

// MockCursor is a mock of Cursor interface.
type MockCursor struct {
	ctrl     *gomock.Controller
	recorder *MockCursorMockRecorder
}

// MockCursorMockRecorder is the mock recorder for MockCursor.
type MockCursorMockRecorder struct {
	mock *MockCursor
}

// NewMockCursor creates a new mock instance.
func NewMockCursor(ctrl *gomock.Controller) *MockCursor {
	mock := &MockCursor{ctrl: ctrl}
	mock.recorder = &MockCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCursor) EXPECT() *MockCursorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCursor) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCursorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCursor)(nil).Close))
}

// Count mocks base method.
func (m *MockCursor) Count() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockCursorMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCursor)(nil).Count))
}

// Extra mocks base method.
func (m *MockCursor) Extra() driver.QueryExtra {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extra")
	ret0, _ := ret[0].(driver.QueryExtra)
	return ret0
}

// Extra indicates an expected call of Extra.
func (mr *MockCursorMockRecorder) Extra() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extra", reflect.TypeOf((*MockCursor)(nil).Extra))
}

// HasMore mocks base method.
func (m *MockCursor) HasMore() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMore")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMore indicates an expected call of HasMore.
func (mr *MockCursorMockRecorder) HasMore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMore", reflect.TypeOf((*MockCursor)(nil).HasMore))
}

// ReadDocument mocks base method.
func (m *MockCursor) ReadDocument(arg0 context.Context, arg1 interface{}) (driver.DocumentMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDocument", arg0, arg1)
	ret0, _ := ret[0].(driver.DocumentMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDocument indicates an expected call of ReadDocument.
func (mr *MockCursorMockRecorder) ReadDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDocument", reflect.TypeOf((*MockCursor)(nil).ReadDocument), arg0, arg1)
}

// Statistics mocks base method.
func (m *MockCursor) Statistics() driver.QueryStatistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics")
	ret0, _ := ret[0].(driver.QueryStatistics)
	return ret0
}

// Statistics indicates an expected call of Statistics.
func (mr *MockCursorMockRecorder) Statistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockCursor)(nil).Statistics))
}

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AbortTransaction mocks base method.
func (m *MockDatabase) AbortTransaction(arg0 context.Context, arg1 driver.TransactionID, arg2 *driver.AbortTransactionOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortTransaction", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortTransaction indicates an expected call of AbortTransaction.
func (mr *MockDatabaseMockRecorder) AbortTransaction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTransaction", reflect.TypeOf((*MockDatabase)(nil).AbortTransaction), arg0, arg1, arg2)
}

// Analyzer mocks base method.
func (m *MockDatabase) Analyzer(arg0 context.Context, arg1 string) (driver.ArangoSearchAnalyzer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Analyzer", arg0, arg1)
	ret0, _ := ret[0].(driver.ArangoSearchAnalyzer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Analyzer indicates an expected call of Analyzer.
func (mr *MockDatabaseMockRecorder) Analyzer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Analyzer", reflect.TypeOf((*MockDatabase)(nil).Analyzer), arg0, arg1)
}

// Analyzers mocks base method.
func (m *MockDatabase) Analyzers(arg0 context.Context) ([]driver.ArangoSearchAnalyzer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Analyzers", arg0)
	ret0, _ := ret[0].([]driver.ArangoSearchAnalyzer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Analyzers indicates an expected call of Analyzers.
func (mr *MockDatabaseMockRecorder) Analyzers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Analyzers", reflect.TypeOf((*MockDatabase)(nil).Analyzers), arg0)
}

// BeginTransaction mocks base method.
func (m *MockDatabase) BeginTransaction(arg0 context.Context, arg1 driver.TransactionCollections, arg2 *driver.BeginTransactionOptions) (driver.TransactionID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", arg0, arg1, arg2)
	ret0, _ := ret[0].(driver.TransactionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockDatabaseMockRecorder) BeginTransaction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockDatabase)(nil).BeginTransaction), arg0, arg1, arg2)
}

// Collection mocks base method.
func (m *MockDatabase) Collection(arg0 context.Context, arg1 string) (driver.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", arg0, arg1)
	ret0, _ := ret[0].(driver.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collection indicates an expected call of Collection.
func (mr *MockDatabaseMockRecorder) Collection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockDatabase)(nil).Collection), arg0, arg1)
}

// CollectionExists mocks base method.
func (m *MockDatabase) CollectionExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionExists indicates an expected call of CollectionExists.
func (mr *MockDatabaseMockRecorder) CollectionExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionExists", reflect.TypeOf((*MockDatabase)(nil).CollectionExists), arg0, arg1)
}

// Collections mocks base method.
func (m *MockDatabase) Collections(arg0 context.Context) ([]driver.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collections", arg0)
	ret0, _ := ret[0].([]driver.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collections indicates an expected call of Collections.
func (mr *MockDatabaseMockRecorder) Collections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collections", reflect.TypeOf((*MockDatabase)(nil).Collections), arg0)
}

// CommitTransaction mocks base method.
func (m *MockDatabase) CommitTransaction(arg0 context.Context, arg1 driver.TransactionID, arg2 *driver.CommitTransactionOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockDatabaseMockRecorder) CommitTransaction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockDatabase)(nil).CommitTransaction), arg0, arg1, arg2)
}

// CreateArangoSearchView mocks base method.
func (m *MockDatabase) CreateArangoSearchView(arg0 context.Context, arg1 string, arg2 *driver.ArangoSearchViewProperties) (driver.ArangoSearchView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArangoSearchView", arg0, arg1, arg2)
	ret0, _ := ret[0].(driver.ArangoSearchView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArangoSearchView indicates an expected call of CreateArangoSearchView.
func (mr *MockDatabaseMockRecorder) CreateArangoSearchView(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArangoSearchView", reflect.TypeOf((*MockDatabase)(nil).CreateArangoSearchView), arg0, arg1, arg2)
}

// CreateCollection mocks base method.
func (m *MockDatabase) CreateCollection(arg0 context.Context, arg1 string, arg2 *driver.CreateCollectionOptions) (driver.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(driver.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockDatabaseMockRecorder) CreateCollection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockDatabase)(nil).CreateCollection), arg0, arg1, arg2)
}

// CreateGraph mocks base method.
func (m *MockDatabase) CreateGraph(arg0 context.Context, arg1 string, arg2 *driver.CreateGraphOptions) (driver.Graph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraph", arg0, arg1, arg2)
	ret0, _ := ret[0].(driver.Graph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGraph indicates an expected call of CreateGraph.
func (mr *MockDatabaseMockRecorder) CreateGraph(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraph", reflect.TypeOf((*MockDatabase)(nil).CreateGraph), arg0, arg1, arg2)
}

// EngineInfo mocks base method.
func (m *MockDatabase) EngineInfo(arg0 context.Context) (driver.EngineInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EngineInfo", arg0)
	ret0, _ := ret[0].(driver.EngineInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EngineInfo indicates an expected call of EngineInfo.
func (mr *MockDatabaseMockRecorder) EngineInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EngineInfo", reflect.TypeOf((*MockDatabase)(nil).EngineInfo), arg0)
}

// EnsureAnalyzer mocks base method.
func (m *MockDatabase) EnsureAnalyzer(arg0 context.Context, arg1 driver.ArangoSearchAnalyzerDefinition) (bool, driver.ArangoSearchAnalyzer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAnalyzer", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(driver.ArangoSearchAnalyzer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnsureAnalyzer indicates an expected call of EnsureAnalyzer.
func (mr *MockDatabaseMockRecorder) EnsureAnalyzer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAnalyzer", reflect.TypeOf((*MockDatabase)(nil).EnsureAnalyzer), arg0, arg1)
}

// Graph mocks base method.
func (m *MockDatabase) Graph(arg0 context.Context, arg1 string) (driver.Graph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Graph", arg0, arg1)
	ret0, _ := ret[0].(driver.Graph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Graph indicates an expected call of Graph.
func (mr *MockDatabaseMockRecorder) Graph(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Graph", reflect.TypeOf((*MockDatabase)(nil).Graph), arg0, arg1)
}

// GraphExists mocks base method.
func (m *MockDatabase) GraphExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GraphExists indicates an expected call of GraphExists.
func (mr *MockDatabaseMockRecorder) GraphExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphExists", reflect.TypeOf((*MockDatabase)(nil).GraphExists), arg0, arg1)
}

// Graphs mocks base method.
func (m *MockDatabase) Graphs(arg0 context.Context) ([]driver.Graph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Graphs", arg0)
	ret0, _ := ret[0].([]driver.Graph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Graphs indicates an expected call of Graphs.
func (mr *MockDatabaseMockRecorder) Graphs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Graphs", reflect.TypeOf((*MockDatabase)(nil).Graphs), arg0)
}

// Info mocks base method.
func (m *MockDatabase) Info(arg0 context.Context) (driver.DatabaseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0)
	ret0, _ := ret[0].(driver.DatabaseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockDatabaseMockRecorder) Info(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockDatabase)(nil).Info), arg0)
}

// Name mocks base method.
func (m *MockDatabase) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDatabaseMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDatabase)(nil).Name))
}

// Query mocks base method.
func (m *MockDatabase) Query(arg0 context.Context, arg1 string, arg2 map[string]interface{}) (driver.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1, arg2)
	ret0, _ := ret[0].(driver.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDatabaseMockRecorder) Query(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDatabase)(nil).Query), arg0, arg1, arg2)
}

// Remove mocks base method.
func (m *MockDatabase) Remove(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockDatabaseMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDatabase)(nil).Remove), arg0)
}

// Transaction mocks base method.
func (m *MockDatabase) Transaction(arg0 context.Context, arg1 string, arg2 *driver.TransactionOptions) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction.
func (mr *MockDatabaseMockRecorder) Transaction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockDatabase)(nil).Transaction), arg0, arg1, arg2)
}

// TransactionStatus mocks base method.
func (m *MockDatabase) TransactionStatus(arg0 context.Context, arg1 driver.TransactionID) (driver.TransactionStatusRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionStatus", arg0, arg1)
	ret0, _ := ret[0].(driver.TransactionStatusRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionStatus indicates an expected call of TransactionStatus.
func (mr *MockDatabaseMockRecorder) TransactionStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionStatus", reflect.TypeOf((*MockDatabase)(nil).TransactionStatus), arg0, arg1)
}

// ValidateQuery mocks base method.
func (m *MockDatabase) ValidateQuery(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateQuery", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateQuery indicates an expected call of ValidateQuery.
func (mr *MockDatabaseMockRecorder) ValidateQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateQuery", reflect.TypeOf((*MockDatabase)(nil).ValidateQuery), arg0, arg1)
}

// View mocks base method.
func (m *MockDatabase) View(arg0 context.Context, arg1 string) (driver.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View", arg0, arg1)
	ret0, _ := ret[0].(driver.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// View indicates an expected call of View.
func (mr *MockDatabaseMockRecorder) View(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockDatabase)(nil).View), arg0, arg1)
}

// ViewExists mocks base method.
func (m *MockDatabase) ViewExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewExists indicates an expected call of ViewExists.
func (mr *MockDatabaseMockRecorder) ViewExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewExists", reflect.TypeOf((*MockDatabase)(nil).ViewExists), arg0, arg1)
}

// Views mocks base method.
func (m *MockDatabase) Views(arg0 context.Context) ([]driver.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Views", arg0)
	ret0, _ := ret[0].([]driver.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Views indicates an expected call of Views.
func (mr *MockDatabaseMockRecorder) Views(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Views", reflect.TypeOf((*MockDatabase)(nil).Views), arg0)
}
